{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","items","map","item","className","key","type","id","value","text","onChange","e","editTask","icon","onClick","deleteClicked","duration","easing","library","add","faTrash","App","inputHandler","setState","currentItem","target","Date","now","formHandler","preventDefault","NewItem","state","newItems","console","log","deleteTaskHandler","updatedItems","filter","editTaskHandler","bind","onSubmit","this","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6TA0BeA,MArBf,SAAmBC,GACjB,IACMD,EADQC,EAAMC,MACIC,KAAI,SAACC,GAC3B,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC9B,2BACE,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAQL,EAAKM,KAAMC,SAAU,SAACC,GAAD,OAAKX,EAAMY,SAASD,EAAER,EAAKE,QACzF,8BACE,kBAAC,IAAD,CAAiBD,UAAU,UAAUS,KAAK,QAAQC,QAAS,kBAAId,EAAMe,cAAcZ,EAAKE,cAOlG,OAAQ,6BACJ,kBAAC,IAAD,CAAUW,SAAU,IAAKC,OAAO,eAAelB,K,eCfrDmB,IAAQC,IAAIC,K,IAsFGC,E,kDAnFb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IAYRsB,aAAe,SAACX,GACd,EAAKY,SAAS,CACZC,YAAa,CACXf,KAAME,EAAEc,OAAOjB,MACfH,IAAKqB,KAAKC,UAjBG,EAsBnBC,YAAc,SAACjB,GACbA,EAAEkB,iBACF,IAAMC,EAAU,EAAKC,MAAMP,YAC3B,GAAqB,KAAjBM,EAAQrB,KAAa,CACvB,IAAMuB,EAAQ,sBAAO,EAAKD,MAAM9B,OAAlB,CAAyB6B,IACvCG,QAAQC,IAAIF,GACZ,EAAKT,SAAS,CACZtB,MAAO+B,EACPR,YAAa,CACXf,KAAM,GACNJ,IAAK,QAhCM,EAsCnB8B,kBAAoB,SAAC9B,GACnB,IAAM+B,EAAe,EAAKL,MAAM9B,MAAMoC,QAAO,SAAClC,GAAD,OAAUA,EAAKE,MAAQA,KACpE,EAAKkB,SAAS,CAACtB,MAAMmC,KAxCJ,EA2CnBE,gBAAiB,SAAC3B,EAAEN,GAClB,IAAIJ,EAAQ,EAAK8B,MAAM9B,MAExBA,EAAMC,KAAI,SAAAC,GAEP,OAAGA,EAAKE,MAAMA,IACZF,EAAKM,KAAKE,EAAEc,OAAOjB,OACZ,MAKX,EAAKe,SAAS,CAACtB,MAAMA,KArDrB,EAAK8B,MAAQ,CACX9B,MAAO,GACPuB,YAAa,CACXf,KAAM,GACNJ,IAAK,KAGT,EAAKuB,YAAc,EAAKA,YAAYW,KAAjB,gBACnB,EAAKjB,aAAe,EAAKA,aAAaiB,KAAlB,gBAVH,E,qDA4DjB,OACE,yBAAKnC,UAAU,OACb,gCACE,0BAAMG,GAAG,YAAYiC,SAAUC,KAAKb,aAClC,2BACEtB,KAAK,OACLI,SAAU+B,KAAKnB,aACfoB,YAAY,aACZlC,MAAOiC,KAAKV,MAAMP,YAAYf,OAEhC,4BAAQH,KAAK,UAAb,SAGJ,kBAAC,EAAD,CACEL,MAAOwC,KAAKV,MAAM9B,MAClBc,cAAe0B,KAAKN,kBACpBvB,SAAU6B,KAAKH,uB,GA7EPK,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.d15778e6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ListItems.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport  FlipMove  from \"react-flip-move\";\r\n\r\nfunction ListItems(props) {\r\n  const items = props.items;\r\n  const ListItems = items.map((item) => {\r\n    return (\r\n      <div className=\"list\" key={item.key}>\r\n        <p >\r\n          <input type=\"text\" id={item.key} value= {item.text} onChange={(e)=>props.editTask(e,item.key)} ></input>\r\n          <span>\r\n            <FontAwesomeIcon className=\"faIcons\" icon=\"trash\" onClick={()=>props.deleteClicked(item.key)}></FontAwesomeIcon>\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (<div>\r\n      <FlipMove duration={500} easing=\"ease-in-out\">{ListItems}</FlipMove>\r\n      \r\n      </div>);\r\n}\r\n\r\nexport default ListItems;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ListItmes from \"./ListItems\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faTrash);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\",\n      },\n    };\n    this.formHandler = this.formHandler.bind(this);\n    this.inputHandler = this.inputHandler.bind(this);\n  }\n\n  inputHandler = (e) => {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now(),\n      },\n    });\n  };\n\n  formHandler = (e) => {\n    e.preventDefault();\n    const NewItem = this.state.currentItem;\n    if (NewItem.text !== \"\") {\n      const newItems = [...this.state.items, NewItem];\n      console.log(newItems);\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: \"\",\n          key: \"\",\n        },\n      });\n    }\n  };\n\n  deleteTaskHandler = (key) => {\n    const updatedItems = this.state.items.filter((item) => item.key !== key);\n    this.setState({items:updatedItems})\n  };\n\n  editTaskHandler= (e,key) => {\n    let items = this.state.items;\n    \n   items.map(item=>{\n\n      if(item.key===key){\n        item.text=e.target.value;\n        return true;\n      }\n      return false;\n    })\n\n    this.setState({items:items});\n    \n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <form id=\"todo-form\" onSubmit={this.formHandler}>\n            <input\n              type=\"text\"\n              onChange={this.inputHandler}\n              placeholder=\"Enter Text\"\n              value={this.state.currentItem.text}\n            ></input>\n            <button type=\"submit\">Add</button>\n          </form>\n        </header>\n        <ListItmes\n          items={this.state.items}\n          deleteClicked={this.deleteTaskHandler}\n          editTask={this.editTaskHandler}\n        ></ListItmes>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}